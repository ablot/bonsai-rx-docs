(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{125:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),b=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=b(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),s=b(n),d=a,m=s["".concat(o,".").concat(d)]||s[d]||u[d]||i;return n?r.a.createElement(m,c(c({ref:t},l),{},{components:n})):r.a.createElement(m,c({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var c={};for(var p in t)hasOwnProperty.call(t,p)&&(c[p]=t[p]);c.originalType=e,c.mdxType="string"==typeof e?e:a,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(3),r=n(7),i=(n(0),n(125)),o={id:"convert_scale",title:"ConvertScale"},c={unversionedId:"fundamentals/dsp/convert_scale",id:"fundamentals/dsp/convert_scale",isDocsHomePage:!1,title:"ConvertScale",description:"Prerequisites:",source:"@site/docs/fundamentals/dsp/convert_scale.md",slug:"/fundamentals/dsp/convert_scale",permalink:"/bonsai-rx-docs/docs/fundamentals/dsp/convert_scale",editUrl:"https://github.com/spewil/bonsai-rx-docs/edit/main/docs/fundamentals/dsp/convert_scale.md",version:"current",sidebar:"docs",previous:{title:"DigitalOutput",permalink:"/bonsai-rx-docs/docs/fundamentals/daqmx/digital_output"},next:{title:"FunctionGenerator",permalink:"/bonsai-rx-docs/docs/fundamentals/dsp/function_generator"}},p=[],l={rightToc:p};function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Prerequisites"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"bonsai Dsp Library")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Category"),": Transform"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Brief"),": Converts the input array into the specified bit depth with optional linear transformations."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Input")," (",Object(i.b)("em",{parentName:"p"},"OpenCV.Net.Mat"),", ",Object(i.b)("em",{parentName:"p"},"OpenCV.Net.IplImage"),", ...) - an array"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Properties"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Depth"),"(",Object(i.b)("em",{parentName:"li"},"System.Nullable","<","OpenCV.Net.Depth",">"),") - target bit depth of individual array elements (optional, can choose from ",Object(i.b)("inlineCode",{parentName:"li"},"U8"),", ",Object(i.b)("inlineCode",{parentName:"li"},"S8"),", ",Object(i.b)("inlineCode",{parentName:"li"},"U16"),", ",Object(i.b)("inlineCode",{parentName:"li"},"S16"),", ",Object(i.b)("inlineCode",{parentName:"li"},"S32"),", ",Object(i.b)("inlineCode",{parentName:"li"},"F32"),", ",Object(i.b)("inlineCode",{parentName:"li"},"F64"),"); if left empty, leaves the input depth unchanged"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Scale")," (",Object(i.b)("em",{parentName:"li"},"double"),") - scale factor applied to individual array elements (optional)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Shift")," (",Object(i.b)("em",{parentName:"li"},"double"),") - value to be added to individual array elements (optional)")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Output")," (",Object(i.b)("em",{parentName:"p"},"OpenCV.Net.Mat"),", ",Object(i.b)("em",{parentName:"p"},"OpenCV.Net.IplImage"),", ...) - an array of the same shape and type as the input array"),Object(i.b)("hr",null),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Tip"),": ",Object(i.b)("inlineCode",{parentName:"p"},"ConvertScale")," with ",Object(i.b)("inlineCode",{parentName:"p"},"Scale")," = 0 can be used to stop input transmission, e.g. to drive pins/ports to LOW state at the end of a workflow "),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Tip"),": Use ",Object(i.b)("inlineCode",{parentName:"p"},"ConvertScale")," to convert image data with depth greater than 8 bits to ",Object(i.b)("inlineCode",{parentName:"p"},"U8"),", which is accepted as input by ",Object(i.b)("inlineCode",{parentName:"p"},"VideoWriter"),". ",Object(i.b)("inlineCode",{parentName:"p"},"Scale")," and ",Object(i.b)("inlineCode",{parentName:"p"},"Shift")," arguments can be set accordingly (based on the expected pixel range) to maintain image appearance as much as possible."))}b.isMDXComponent=!0}}]);