(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{81:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return b})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return p})),n.d(t,"default",(function(){return c}));var a=n(3),i=n(7),r=(n(0),n(91)),b={id:"data_writers",title:"Writing Data to Files"},l={unversionedId:"fundamentals/data_writers",id:"fundamentals/data_writers",isDocsHomePage:!1,title:"Writing Data to Files",description:"VideoWriter \\sink",source:"@site/docs\\fundamentals\\data_writers.md",slug:"/fundamentals/data_writers",permalink:"/docs/fundamentals/data_writers",editUrl:"https://github.com/spewil/bonsai-rx-docs/edit/master/website/docs/fundamentals/data_writers.md",version:"current"},p=[{value:"<strong><code>VideoWriter</code></strong> #sink",id:"videowriter-sink",children:[]},{value:"<strong><code>CsvWriter</code></strong> #sink",id:"csvwriter-sink",children:[]},{value:"<strong><code>MatrixWriter</code></strong> #sink",id:"matrixwriter-sink",children:[]},{value:"Common errors",id:"common-errors",children:[]}],o={rightToc:p};function c(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("h3",{id:"videowriter-sink"},Object(r.b)("strong",{parentName:"h3"},Object(r.b)("inlineCode",{parentName:"strong"},"VideoWriter"))," ","#","sink"),Object(r.b)("p",null,"writes the input image sequence to a compressed ",Object(r.b)("inlineCode",{parentName:"p"},".avi")," file"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"input")," (",Object(r.b)("em",{parentName:"p"},"OpenCV.Net.IpIImage"),") - 2D matrix of pixels, such as that produced by ",Object(r.b)("inlineCode",{parentName:"p"},"CameraCapture")," or the ",Object(r.b)("inlineCode",{parentName:"p"},"Image")," output of other camera source nodes"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"properties"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Buffered")," (",Object(r.b)("em",{parentName:"li"},"bool"),") - indicates whether writing should be buffered"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FileName")," (",Object(r.b)("em",{parentName:"li"},"string"),") - name of the output file or full path to the\noutput file if the desired path is different from the current\nworking directory"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FourCC")," (",Object(r.b)("em",{parentName:"li"},"string"),") - the four-character code of the codec used to\ncompress video frames, e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"FMP4")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FrameRate")," (",Object(r.b)("em",{parentName:"li"},"double"),") - playback frame rate of the image sequence"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FrameSize")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net.Size"),") - frame size in the output file",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Width")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Height")," (",Object(r.b)("em",{parentName:"li"},"int"),")"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Overwrite")," (",Object(r.b)("em",{parentName:"li"},"bool"),") - indicates whether the output file should be\noverwritten if it already exists"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ResizeInterpolation")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net.SubPixelInterpolation"),") -\ninterpolation method used to resize video frames, e.g.\n",Object(r.b)("inlineCode",{parentName:"li"},"NearestNeighbor")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Suffix")," (",Object(r.b)("em",{parentName:"li"},"Bonsai.IO.PathSuffix"),") - optional suffix used to generate\nfile names: ",Object(r.b)("inlineCode",{parentName:"li"},"None"),", ",Object(r.b)("inlineCode",{parentName:"li"},"FileCount"),", ",Object(r.b)("inlineCode",{parentName:"li"},"Timestamp"),"; generates new files\neven if ",Object(r.b)("inlineCode",{parentName:"li"},"Overwrite")," is set to True")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"output")," (",Object(r.b)("em",{parentName:"p"},"OpenCV.Net.IpIImage"),"):"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"IsInvalid")," (",Object(r.b)("em",{parentName:"li"},"bool"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ElementType")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Size")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net.Size"),")",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Width")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Height")," (",Object(r.b)("em",{parentName:"li"},"int"),")"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Depth")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net"),".",Object(r.b)("em",{parentName:"li"},"IpIDepth"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Channels")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Width")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Height")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"WidthStep")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ImageData")," (",Object(r.b)("em",{parentName:"li"},"System.IntPtr"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ChannelOfInterest")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"RegionOfInterest")," (",Object(r.b)("em",{parentName:"li"},"OpenCV.Net.Rect"),")",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"X")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Y")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Width")," (",Object(r.b)("em",{parentName:"li"},"int"),")"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Height")," (",Object(r.b)("em",{parentName:"li"},"int"),")"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"IsClosed")," (",Object(r.b)("em",{parentName:"li"},"bool"),")")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"tip"),": How to get real-time playback rate?\nWithout a hardware trigger, the acquisition frame rate might be\nunstable. If the playback seems vastly different from real-time, one can\nplace ",Object(r.b)("inlineCode",{parentName:"p"},"TimeInterval")," after ",Object(r.b)("inlineCode",{parentName:"p"},"VideoWriter")," to measure the real frame rate\nand then specify the corresponding frequency in the ",Object(r.b)("inlineCode",{parentName:"p"},"FrameRate")," property\nof ",Object(r.b)("inlineCode",{parentName:"p"},"VideoWriter"),"."),Object(r.b)("p",null,"With a hardware trigger, one can set the ",Object(r.b)("inlineCode",{parentName:"p"},"FrameRate")," property of\n",Object(r.b)("inlineCode",{parentName:"p"},"VideoWriter")," equal to the (known) trigger frequency."),Object(r.b)("hr",null),Object(r.b)("h3",{id:"csvwriter-sink"},Object(r.b)("strong",{parentName:"h3"},Object(r.b)("inlineCode",{parentName:"strong"},"CsvWriter"))," ","#","sink"),Object(r.b)("p",null,"writes elements of the input sequence to a ",Object(r.b)("inlineCode",{parentName:"p"},".csv")," file"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"input")," - accepts several input types (single elements, tuples, arrays) as long as it comes from a single source node"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"properties"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Append")," (",Object(r.b)("em",{parentName:"li"},"bool"),") - indicates whether data should be appended to the output file if it already exists"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Delimiter")," (",Object(r.b)("em",{parentName:"li"},"string"),") - separator of columns in the output file; if not specified, comma is used"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"FileName")," (",Object(r.b)("em",{parentName:"li"},"ListSeparator"),") - name of the output file or full path to the\noutput file if the desired path is different from the current\nworking directory"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"IncludeHeader")," (",Object(r.b)("em",{parentName:"li"},"bool"),") - indicates whether to include a text header with column names"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"ListSeparator")," (",Object(r.b)("em",{parentName:"li"},"string"),") - separator of elements in variable length rows (optional)"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Overwrite")," (",Object(r.b)("em",{parentName:"li"},"bool"),") - indicates whether the output file should be\noverwritten if it already exists"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Selector")," (",Object(r.b)("em",{parentName:"li"},"string"),") - selects a subset of the input's inner properties that will be written to file"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Suffix")," (",Object(r.b)("em",{parentName:"li"},"Bonsai.IO.PathSuffix"),") - optional suffix used to generate\nfile names: ",Object(r.b)("inlineCode",{parentName:"li"},"None"),", ",Object(r.b)("inlineCode",{parentName:"li"},"FileCount"),", ",Object(r.b)("inlineCode",{parentName:"li"},"Timestamp"),"; generates new files\neven if ",Object(r.b)("inlineCode",{parentName:"li"},"Overwrite")," is set to True\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"output")," - same type as the input"),Object(r.b)("hr",null),Object(r.b)("h3",{id:"matrixwriter-sink"},Object(r.b)("strong",{parentName:"h3"},Object(r.b)("inlineCode",{parentName:"strong"},"MatrixWriter"))," ","#","sink"),Object(r.b)("p",null,"writes the input signal into a ",Object(r.b)("inlineCode",{parentName:"p"},".bin")," file"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"input")," (",Object(r.b)("em",{parentName:"p"},"OpenCV.Net.Mat"),") - an array"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"properties"),":"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Layout"),"(",Object(r.b)("em",{parentName:"li"},"Bonsai.Dsp.MatrixLayout"),") - controls how individual buffer matrices are linearised into disk; when input is a ",Object(r.b)("inlineCode",{parentName:"li"},"C x N")," array (where ",Object(r.b)("inlineCode",{parentName:"li"},"C")," is number of channels and ",Object(r.b)("inlineCode",{parentName:"li"},"N")," is number of samples in buffer), as is the case in almost all bonsai data sources, the appropriate layout is ",Object(r.b)("inlineCode",{parentName:"li"},"ColumnMajor")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Path")," (",Object(r.b)("em",{parentName:"li"},"string"),") - name of the output file or full path to the\noutput file if the desired path is different from the current"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Suffix")," (",Object(r.b)("em",{parentName:"li"},"Bonsai.IO.PathSuffix"),") - optional suffix used to generate\nfile names: ",Object(r.b)("inlineCode",{parentName:"li"},"None"),", ",Object(r.b)("inlineCode",{parentName:"li"},"FileCount"),", ",Object(r.b)("inlineCode",{parentName:"li"},"Timestamp"),"; generates new files\neven if ",Object(r.b)("inlineCode",{parentName:"li"},"Overwrite")," is set to True "),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"Overwrite")," (",Object(r.b)("em",{parentName:"li"},"bool"),") - indicates whether the output file should be\noverwritten if it already exists")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"output")," (",Object(r.b)("em",{parentName:"p"},"OpenCV.Net.Mat"),") - the same array"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"tip"),": to read a ",Object(r.b)("inlineCode",{parentName:"p"},".bin")," file (written with ",Object(r.b)("inlineCode",{parentName:"p"},"ColumnMajor")," layout) in Python, one can use ",Object(r.b)("inlineCode",{parentName:"p"},"numpy.fromfile(path, dtype).reshape(-1,C)")," where ",Object(r.b)("inlineCode",{parentName:"p"},"C")," is the number of input channels.\n",Object(r.b)("inlineCode",{parentName:"p"},"dtype")," depends on the input signal ",Object(r.b)("inlineCode",{parentName:"p"},"Depth")),Object(r.b)("table",null,Object(r.b)("thead",{parentName:"table"},Object(r.b)("tr",{parentName:"thead"},Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"depth"),Object(r.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"dtype"))),Object(r.b)("tbody",{parentName:"table"},Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"U8"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"np.uint8"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"S8"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"np.int8"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"U16"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"np.uint16"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"S16"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"np.int16"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"S32"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"np.int32"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"F32"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"np.single")," or ",Object(r.b)("inlineCode",{parentName:"td"},"np.float32"))),Object(r.b)("tr",{parentName:"tbody"},Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"F64"),Object(r.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(r.b)("inlineCode",{parentName:"td"},"np.double")," or ",Object(r.b)("inlineCode",{parentName:"td"},"np.float64"))))),Object(r.b)("hr",null),Object(r.b)("h3",{id:"common-errors"},"Common errors"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Runtime Error: Input array must have the same element type"),"\nElement type may refer to the ",Object(r.b)("inlineCode",{parentName:"p"},"Depth")," parameter of input signals (e.g. in ",Object(r.b)("inlineCode",{parentName:"p"},"FunctionGenerator"),"). It must be the same for all input signals fed into a given writer node."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Runtime Error: Input array must have the same shape except in the dimension corresponding to axis"),"\nHappens when input arrays have different shapes, possibly due to unequal ",Object(r.b)("inlineCode",{parentName:"p"},"BufferSize")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"Runtime Error: A valid file path must be specified"),"\nOccurs when the ",Object(r.b)("inlineCode",{parentName:"p"},"FileName")," or ",Object(r.b)("inlineCode",{parentName:"p"},"Path")," property of the writer node is left empty or not specified properly"))}c.isMDXComponent=!0},91:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return s}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function b(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?b(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=i.a.createContext({}),c=function(e){var t=i.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return i.a.createElement(o.Provider,{value:t},e.children)},O={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,b=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),m=c(n),u=a,s=m["".concat(b,".").concat(u)]||m[u]||O[u]||r;return n?i.a.createElement(s,l(l({ref:t},o),{},{components:n})):i.a.createElement(s,l({ref:t},o))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,b=new Array(r);b[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,b[1]=l;for(var o=2;o<r;o++)b[o]=n[o];return i.a.createElement.apply(null,b)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);