(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{76:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return r})),a.d(t,"rightToc",(function(){return m})),a.d(t,"default",(function(){return c}));var n=a(3),i=a(7),b=(a(0),a(96)),l={id:"video_acquisition",title:"Acquiring Video"},r={unversionedId:"video_acquisition",id:"video_acquisition",isDocsHomePage:!1,title:"Acquiring Video",description:"Basler cameras",source:"@site/docs/video_acquisition.md",slug:"/video_acquisition",permalink:"/docs/video_acquisition",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/video_acquisition.md",version:"current",sidebar:"docs",previous:{title:"Welcome to Bonsai Docs!",permalink:"/docs/"},next:{title:"empty doc for linking purposes",permalink:"/docs/doc2"}},m=[{value:"<strong>FLIR Spinnaker cameras</strong>",id:"flir-spinnaker-cameras",children:[]},{value:"Webcam",id:"webcam",children:[]},{value:"All video sources",id:"all-video-sources",children:[]},{value:"Tip: real-time playback rate",id:"tip-real-time-playback-rate",children:[]},{value:"Common errors",id:"common-errors",children:[]}],p={rightToc:m};function c(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Basler cameras")),Object(b.b)("p",null,"Requires:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"bonsai Pylon Library"),Object(b.b)("li",{parentName:"ul"},"pylon Camera Software Suite 5.1.0 from the ",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"https://www.baslerweb.com/en/sales-support/downloads/software-downloads/"}),"basler\nwebsite"))),Object(b.b)("p",null,"\\\n",Object(b.b)("strong",{parentName:"p"},Object(b.b)("inlineCode",{parentName:"strong"},"PylonCapture"))," ","#","source\\\nacquires a sequence of images from a basler camera using the pylon\nsoftware\\\n\\\n",Object(b.b)("strong",{parentName:"p"},"properties"),":"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ParameterFile")," - full path to an ",Object(b.b)("inlineCode",{parentName:"li"},".fps")," file describing the desired\ncamera features. The file can be created in pylonViewer\n",Object(b.b)("inlineCode",{parentName:"li"},"Camera -> Save features")," once the features are set."),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"SerialNumber")," - serial number of the camera, identical to that\ndisplayed in pylonViewer. It should appear in the drop-down list\nonce the camera is connected.")),Object(b.b)("p",null,"\\\n",Object(b.b)("strong",{parentName:"p"},"output")," (",Object(b.b)("em",{parentName:"p"},"Bonsai.pylon.pylonDataFrame"),"):"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Image")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.IpIImage"),") - 2D matrix of pixels, accepted as\ninput by ",Object(b.b)("inlineCode",{parentName:"li"},"VideoWriter"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"IsInvalid")," (",Object(b.b)("em",{parentName:"li"},"bool"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ElementType")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Size")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.Size"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Depth")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.IpIDepth"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Channels")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"WidthStep")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ImageData")," (",Object(b.b)("em",{parentName:"li"},"System.IntPtr"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ChannelOfInterest")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"RegionOfInterest")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.Rect"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"X")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Y")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"IsClosed")," (",Object(b.b)("em",{parentName:"li"},"bool"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"GrabResult")," (",Object(b.b)("em",{parentName:"li"},"Basler.Pylon.IGrabResult"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Orientation")," (",Object(b.b)("em",{parentName:"li"},"Basler.Pylon.ImageOrientation"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"PaddingX")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"PixelTypeValue")," (",Object(b.b)("em",{parentName:"li"},"Basler.Pylon.PixelTypei)")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"PixelData")," (",Object(b.b)("em",{parentName:"li"},"object"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"IsValid")," (",Object(b.b)("em",{parentName:"li"},"bool"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"SkippedImageCount")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ImageNumber")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ID")," (",Object(b.b)("em",{parentName:"li"},"long"),") - 1-based frame index"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"BufferUserData")," (",Object(b.b)("em",{parentName:"li"},"object"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"StreamGrabberUserData")," (",Object(b.b)("em",{parentName:"li"},"object"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Timestamp")," (",Object(b.b)("em",{parentName:"li"},"long"),") - hardware timestamp"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"BlockID")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"PayloadSize")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"HasCRC")," (",Object(b.b)("em",{parentName:"li"},"bool"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ChunkData")," (",Object(b.b)("em",{parentName:"li"},"Basler.Pylon.IParameterCollection"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"HasChunkData")," (",Object(b.b)("em",{parentName:"li"},"bool"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ErrorDescription")," (",Object(b.b)("em",{parentName:"li"},"string"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Length")," (",Object(b.b)("em",{parentName:"li"},"int"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ErrorCode")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"GrabSucceeded")," (",Object(b.b)("em",{parentName:"li"},"bool"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"PaddingY")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"PayloadTypeValue")," (",Object(b.b)("em",{parentName:"li"},"Basler.Pylon.PayloadType"),")")))),Object(b.b)("p",null,"\\"),Object(b.b)("h2",{id:"flir-spinnaker-cameras"},Object(b.b)("strong",{parentName:"h2"},"FLIR Spinnaker cameras")),Object(b.b)("p",null,"Requires:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"bonsai Spinnaker Library"),Object(b.b)("li",{parentName:"ul"},"Spinnaker SDK 1.29.0.5 from the ",Object(b.b)("a",Object(n.a)({parentName:"li"},{href:"https://meta.box.lenovo.com/v/link/view/a1995795ffba47dbbe45771477319cc3"}),"FLIR\nwebsite"))),Object(b.b)("p",null,"\\\n",Object(b.b)("strong",{parentName:"p"},Object(b.b)("inlineCode",{parentName:"strong"},"SpinnakerCapture"))," ","#","source\\\nacquires a sequence of images from a FLIR camera using the Spinnaker\nsoftware\\\n\\\nCamera parameters have to be set in SpinView every time a camera is\nconnected.\\\n\\\n",Object(b.b)("strong",{parentName:"p"},"properties"),":"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ColorProcessing")," - the methodDefault vs. NoColorProcessing"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Index")," - index of the camera to acquire images from")),Object(b.b)("p",null,"\\\n",Object(b.b)("strong",{parentName:"p"},"output")," (",Object(b.b)("em",{parentName:"p"},"Bonsai.Spinnaker.SpinnakerDataFrame"),"):"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Image")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.IpIImage"),") - 2D matrix of pixels, accepted as\ninput by ",Object(b.b)("inlineCode",{parentName:"li"},"VideoWriter"),Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"IsInvalid")," (",Object(b.b)("em",{parentName:"li"},"bool"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ElementType")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Size")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.Size"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Depth")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.IpIDepth"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Channels")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"WidthStep")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ImageData")," (",Object(b.b)("em",{parentName:"li"},"System.IntPtr"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ChannelOfInterest")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"RegionOfInterest")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.Rect"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"X")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Y")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"IsClosed")," (",Object(b.b)("em",{parentName:"li"},"bool"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ChunkData")," (",Object(b.b)("em",{parentName:"li"},"SpinnakerNET.ManagedChunkData"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"InferenceBoundingBoxResult"),"\n(",Object(b.b)("em",{parentName:"li"},"SpinnakerNET.ManagedInferenceBoundingBoxResult"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"InferenceConfidence")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"InferenceResult")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Scan3dCoordinateReferenceValue")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Scan3dTransformValue")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Scan3dAxisMax")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Scan3dAxisMin")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Scan3dInvalidDataValue")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Scan3dCoordinateOffset")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Scan3dCoordinateScale")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"StreamChannelID")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"TransferQueueCurrentBlockCount")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"TransferBlockID")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"LinePitch")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"EncoderValue")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ScanLineSelector")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"TimerValue")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"CounterValue")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"LineStatusAll")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"TimestampLatchValue")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"PixelDynamicRangeMax")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"PixelDynamicRangeMin")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"PartSelector")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"SerialDataLength")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"OffsetY")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"OffsetX")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"CRC")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"SequencerSetActive")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Gain")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Image")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ExposureEndLineStatusAll")," (",Object(b.b)("em",{parentName:"li"},"long"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Timestamp")," (",Object(b.b)("em",{parentName:"li"},"long"),") - hardware timestamp"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ExposureTime")," (",Object(b.b)("em",{parentName:"li"},"double"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"FrameID")," (",Object(b.b)("em",{parentName:"li"},"long"),") - 1-based frame index"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"BlackLevel")," (",Object(b.b)("em",{parentName:"li"},"double"),")")))),Object(b.b)("p",null,"\\"),Object(b.b)("h2",{id:"webcam"},"Webcam"),Object(b.b)("p",null,"Requires:"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},"bonsai Vision Library")),Object(b.b)("p",null,"\\\n",Object(b.b)("strong",{parentName:"p"},Object(b.b)("inlineCode",{parentName:"strong"},"CameraCapture"))," ","#","source\\\n",Object(b.b)("strong",{parentName:"p"},"properties"),":"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"CaptureProperties")," (",Object(b.b)("em",{parentName:"li"},"Bonsai.Vision.CapturePropertyCollection"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Index")," (",Object(b.b)("em",{parentName:"li"},"int"),") - index of the camera to acquire images from")),Object(b.b)("p",null,"\\\n",Object(b.b)("strong",{parentName:"p"},"output")," (",Object(b.b)("em",{parentName:"p"},"OpenCV.Net.IpIImage"),") - 2D matrix of pixels, accepted as\ninput by ",Object(b.b)("inlineCode",{parentName:"p"},"VideoWriter")),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"IsInvalid")," (",Object(b.b)("em",{parentName:"li"},"bool"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ElementType")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Size")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.Size"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Depth")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.IpIDepth"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Channels")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"WidthStep")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ImageData")," (",Object(b.b)("em",{parentName:"li"},"System.IntPtr"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ChannelOfInterest")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"RegionOfInterest")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.Rect"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"X")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Y")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"IsClosed")," (",Object(b.b)("em",{parentName:"li"},"bool"),")")),Object(b.b)("p",null,"\\"),Object(b.b)("h2",{id:"all-video-sources"},"All video sources"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},Object(b.b)("inlineCode",{parentName:"strong"},"VideoWriter"))," ","#","sink\\\n",Object(b.b)("strong",{parentName:"p"},"input")," (",Object(b.b)("em",{parentName:"p"},"OpenCV.Net.IpIImage"),") ",Object(b.b)("em",{parentName:"p"},"-")," 2D matrix of pixels\\\n\\\n",Object(b.b)("strong",{parentName:"p"},"properties"),":"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Buffered")," (",Object(b.b)("em",{parentName:"li"},"bool"),") - indicates whether writing should be buffered"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"FileName")," (",Object(b.b)("em",{parentName:"li"},"string"),") - name of the output file or full path to the\noutput file if the desired path is different from the current\nworking directory. The specified file extension determines output\nformat, e.g. ",Object(b.b)("inlineCode",{parentName:"li"},".avi")," or ",Object(b.b)("inlineCode",{parentName:"li"},".mp4")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"FourCC")," (",Object(b.b)("em",{parentName:"li"},"string"),") - the four-character code of the codec used to\ncompress video frames, e.g. ",Object(b.b)("inlineCode",{parentName:"li"},"FMP4")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"FrameRate")," (",Object(b.b)("em",{parentName:"li"},"double"),") - playback frame rate of the image sequence"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"FrameSize")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.Size"),") - frame size in the output file",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Overwrite")," (",Object(b.b)("em",{parentName:"li"},"bool"),") - indicates whether the output file should be\noverwritten if it already exists"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ResizeInterpolation")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.SubPixelInterpolation"),") -\ninterpolation method used to resize video frames, e.g.\n",Object(b.b)("inlineCode",{parentName:"li"},"NearestNeighbor")),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Suffix")," (",Object(b.b)("em",{parentName:"li"},"Bonsai.IO.PathSuffix"),") - optional suffix used to generate\nfile names: ",Object(b.b)("inlineCode",{parentName:"li"},"None"),", ",Object(b.b)("inlineCode",{parentName:"li"},"FileCount"),", ",Object(b.b)("inlineCode",{parentName:"li"},"Timestamp"),"; generates new files\neven if ",Object(b.b)("inlineCode",{parentName:"li"},"Overwrite")," is set to True")),Object(b.b)("p",null,"\\\n",Object(b.b)("strong",{parentName:"p"},"output")," (",Object(b.b)("em",{parentName:"p"},"OpenCV.Net.IpIImage"),"):"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"IsInvalid")," (",Object(b.b)("em",{parentName:"li"},"bool"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ElementType")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Size")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.Size"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Depth")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net"),".",Object(b.b)("em",{parentName:"li"},"IpIDepth"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Channels")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"WidthStep")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ImageData")," (",Object(b.b)("em",{parentName:"li"},"System.IntPtr"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"ChannelOfInterest")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"RegionOfInterest")," (",Object(b.b)("em",{parentName:"li"},"OpenCV.Net.Rect"),")",Object(b.b)("ul",{parentName:"li"},Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"X")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Y")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Width")," (",Object(b.b)("em",{parentName:"li"},"int"),")"),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"Height")," (",Object(b.b)("em",{parentName:"li"},"int"),")"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("inlineCode",{parentName:"li"},"IsClosed")," (",Object(b.b)("em",{parentName:"li"},"bool"),")")),Object(b.b)("p",null,"\\"),Object(b.b)("h2",{id:"tip-real-time-playback-rate"},"Tip: real-time playback rate"),Object(b.b)("p",null,"Without a hardware trigger, the acquisition frame rate might be\nunstable. If the playback seems vastly different from real-time, one can\nplace ",Object(b.b)("inlineCode",{parentName:"p"},"TimeInterval")," after ",Object(b.b)("inlineCode",{parentName:"p"},"VideoWriter")," to measure the real frame rate\nand then specify the corresponding frequency in the ",Object(b.b)("inlineCode",{parentName:"p"},"FrameRate")," property\nof ",Object(b.b)("inlineCode",{parentName:"p"},"VideoWriter"),".\\\n\\\nWith a hardware trigger, one can set the ",Object(b.b)("inlineCode",{parentName:"p"},"FrameRate")," property of\n",Object(b.b)("inlineCode",{parentName:"p"},"VideoWriter")," equal to the (known) trigger frequency.\\"),Object(b.b)("h2",{id:"common-errors"},"Common errors"),Object(b.b)("p",null,Object(b.b)("inlineCode",{parentName:"p"},"Runtime error: Unable to acquire camera frame"),"\\\nOne possible reason is that the camera is currently open in another\nsoftware, e.g. pylonViewer or SpinView."))}c.isMDXComponent=!0}}]);